// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package notes

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateNote = `-- name: CreateNote :one
insert into notes (user_id, name, text)
values ($1, $2, $3)
returning id
`

type CreateNoteParams struct {
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Name   string      `db:"name" json:"name"`
	Text   string      `db:"text" json:"text"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateNote, arg.UserID, arg.Name, arg.Text)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const CreateUser = `-- name: CreateUser :one
insert into  users (name, password)
VALUES ($1, $2)
returning id
`

type CreateUserParams struct {
	Name     string `db:"name" json:"name"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateUser, arg.Name, arg.Password)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const DeleteNoteById = `-- name: DeleteNoteById :exec
delete from notes where id = $1
returning id
`

func (q *Queries) DeleteNoteById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteNoteById, id)
	return err
}

const GetAllNotes = `-- name: GetAllNotes :many
select id, user_id, name, text from notes
`

func (q *Queries) GetAllNotes(ctx context.Context) ([]*Note, error) {
	rows, err := q.db.Query(ctx, GetAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllUsers = `-- name: GetAllUsers :many
select id, name, password from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, GetAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetNote = `-- name: GetNote :one
select id, user_id, name, text from notes where id = $1
`

func (q *Queries) GetNote(ctx context.Context, id pgtype.UUID) (*Note, error) {
	row := q.db.QueryRow(ctx, GetNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Text,
	)
	return &i, err
}

const GetUserById = `-- name: GetUserById :one
select id, name, password from users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return &i, err
}

const GetUserByName = `-- name: GetUserByName :one
select id, name, password from users where name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return &i, err
}

const GetUserNoteByName = `-- name: GetUserNoteByName :one
select id, user_id, name, text from notes where user_id = $1 and name = $2
`

type GetUserNoteByNameParams struct {
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Name   string      `db:"name" json:"name"`
}

func (q *Queries) GetUserNoteByName(ctx context.Context, arg GetUserNoteByNameParams) (*Note, error) {
	row := q.db.QueryRow(ctx, GetUserNoteByName, arg.UserID, arg.Name)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Text,
	)
	return &i, err
}

const GetUserNotes = `-- name: GetUserNotes :many
select id, user_id, name, text from notes where user_id = $1
`

func (q *Queries) GetUserNotes(ctx context.Context, userID pgtype.UUID) ([]*Note, error) {
	rows, err := q.db.Query(ctx, GetUserNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserNoteByName = `-- name: UpdateUserNoteByName :exec
update notes 
set text = $3
where name = $1 and user_id = $2
returning id
`

type UpdateUserNoteByNameParams struct {
	Name   string      `db:"name" json:"name"`
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Text   string      `db:"text" json:"text"`
}

func (q *Queries) UpdateUserNoteByName(ctx context.Context, arg UpdateUserNoteByNameParams) error {
	_, err := q.db.Exec(ctx, UpdateUserNoteByName, arg.Name, arg.UserID, arg.Text)
	return err
}
